diff --git a/examples/appengine-https.php b/examples/appengine-https.php
deleted file mode 100644
index 039e2db..0000000
--- a/examples/appengine-https.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-// Redirect to HTTPS by default (for AppEngine)
-if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
-    if ($_SERVER['HTTP_X_FORWARDED_PROTO'] === 'http') {
-        header('HTTP/1.1 301 Moved Permanently');
-        header('Location: https://'.$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI']);
-        exit(0);
-    } else {
-        header('Strict-Transport-Security: max-age=63072000; includeSubDomains; preload');
-    }
-}
diff --git a/examples/config.php.dist b/examples/config.php.dist
deleted file mode 100644
index 4f8f14b..0000000
--- a/examples/config.php.dist
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-return [
-  'v2-standard' => [
-    'site' => '',
-    'secret' => '',
-  ],
-  'v2-invisible' => [
-    'site' => '',
-    'secret' => '',
-  ],
-  'v3' => [
-    'site' => '',
-    'secret' => '',
-  ],
-];
diff --git a/examples/examples.css b/examples/examples.css
deleted file mode 100644
index cb3647b..0000000
--- a/examples/examples.css
+++ /dev/null
@@ -1,37 +0,0 @@
-body {
-  font-family: sans-serif;
-  margin: 0;
-  padding: 0;
-}
-
-h1,
-h2,
-p {
-  margin: 0;
-  padding: 0.5rem 0 0 0;
-  font-weight: normal;
-}
-
-h1,
-h2 {
-  color: #222244;
-}
-
-header {
-  padding: 0.5rem 2rem 0.5rem 2rem;
-  background: #f0f0f4;
-  border-bottom: 1px solid #aaaabb;
-}
-
-main {
-  padding: 0.5rem 2rem 0.5rem 2rem;
-}
-
-.form-field {
-  display: block;
-  margin: 1rem;
-}
-
-.hidden {
-  display: none;
-}
diff --git a/examples/google0afd8760fd68f119.html b/examples/google0afd8760fd68f119.html
deleted file mode 100644
index 457c471..0000000
--- a/examples/google0afd8760fd68f119.html
+++ /dev/null
@@ -1 +0,0 @@
-google-site-verification: google0afd8760fd68f119.html
\ No newline at end of file
diff --git a/examples/index.php b/examples/index.php
deleted file mode 100644
index b715acc..0000000
--- a/examples/index.php
+++ /dev/null
@@ -1,79 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo", "url": "http://recaptcha-demo.appspot.com/" }</script>
-<meta name="description" content="reCAPTCHA demo" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo" />
-<meta property="og:description" content="Examples of the reCAPTCHA client." />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo</title>
-
-<header>
-  <h1>reCAPTCHA demo</h1>
-</header>
-<main>
-  <p>Try out the various forms of <a href="https://www.google.com/recaptcha/">reCAPTCHA</a>.</p>
-  <p>You can find the source code for these examples on GitHub in <kbd><a href="https://github.com/google/recaptcha">google/recaptcha</a></kbd>.</p>
-  <ul>
-    <li><h2>reCAPTCHA v2</h2>
-    <ul>
-      <li><a href="/recaptcha-v2-checkbox.php">"I'm not a robot" checkbox</a></li>
-      <li><a href="/recaptcha-v2-checkbox-explicit.php">"I'm not a robot" checkbox - Explicit render</a></li>
-      <li><a href="/recaptcha-v2-invisible.php">Invisible</a></li>
-    </ul>
-    </li>
-    <li><h2>reCAPTCHA v3</h2>
-    <ul>
-      <li><a href="/recaptcha-v3-request-scores.php">Request scores</a></li>
-    </ul>
-    </li>
-    <li><h2>General</h2>
-    <ul>
-      <li><a href="/recaptcha-content-security-policy.php">Content Security Policy</a></li>
-    </ul>
-    </li>
-  </ul>
-</main>
-
-<!-- Google Analytics - just ignore this -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1"></script>
-<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-content-security-policy.php b/examples/recaptcha-content-security-policy.php
deleted file mode 100644
index aaf7eb2..0000000
--- a/examples/recaptcha-content-security-policy.php
+++ /dev/null
@@ -1,152 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
-// Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// This example shows the use of a Content Security Policy
-// https://developers.google.com/web/fundamentals/security/csp/
-
-// First we generate a pseudorandom nonce for each included or inline script
-$nonce = base64_encode(openssl_random_pseudo_bytes(16));
-
-// Send the CSP header
-// Try commenting out the various lines to see what effect it has
-
-// NOTE: Always test your policy Content-Security-Policy-Report-Only first to
-// ensure you're not blocking any critical functionality. CSP is an important
-// security feature but you can break entire sections of your site if you
-// implement it incorrectly.
-header(
-    "Content-Security-Policy: "
-    ."default-src 'none'; " // By default we will deny everything
-
-    ."script-src 'nonce-".$nonce."' 'strict-dynamic'; " // nonce allowing the reCAPTCHA library and other third-party scripts to be included
-
-    ."img-src https://www.gstatic.com/recaptcha/ https://www.google-analytics.com; " // allow images from these URLS
-    ."frame-src https://www.google.com/; " // allow frames from this URL
-
-    ."style-src 'self'; " // allow style from our own origin
-    ."connect-src 'self'; " // allow the fetch calls to our own origin
-);
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v3']['site'];
-    $secret = $config['v3']['secret'];
-}
-
-// reCAPTCHA supports 40+ languages listed here: https://developers.google.com/recaptcha/docs/language
-$lang = 'en';
-
-// The v3 API lets you provide some context for the check by specifying an action.
-// See: https://developers.google.com/recaptcha/docs/v3
-$pageAction = 'examples/csp';
-
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/recaptcha-content-security-policy.php">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo - Content Security Policy", "url": "https://recaptcha-demo.appspot.com/recaptcha-content-security-policy.php" }</script>
-<meta name="description" content="reCAPTCHA demo - Content Security Policy" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/recaptcha-content-security-policy.php" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo - Content Security Policy" />
-<meta property="og:description" content="reCAPTCHA demo - Content Security Policy" />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo - Content Security Policy</title>
-<header>
-    <h1>reCAPTCHA demo</h1><h2>Content Security Policy</h2>
-    <p><a href="/">↩️ Home</a></p>
-</header>
-<main>
-<?php
-if ($siteKey === '' || $secret === ''):
-?>
-    <h2>Add your keys</h2>
-    <p>If you do not have keys already then visit <kbd> <a href = "https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></kbd> to generate them. Edit this file and set the respective keys in <kbd>$siteKey</kbd> and <kbd>$secret</kbd>. Reload the page after this.</p>
-    <?php
-else:
-    ?>
-    <p>This example is sending the <kbd>Content-Security-Policy</kbd> header. Look at the source and inspect the network tab for this request to see what's happening. The reCAPTCHA v3 API is being called here, however you can use the same approach for the v2 API calls as well.</p>
-    <p><strong>NOTE:</strong>This is a sample implementation, the score returned here is not a reflection on your Google account or type of traffic. In production, refer to the distribution of scores shown in <a href="https://www.google.com/recaptcha/admin" target="_blank">your admin interface</a> and adjust your own threshold accordingly. <strong>Do not raise issues regarding the score you see here.</strong></p>
-    <ol id="recaptcha-steps">
-        <li class="step0">reCAPTCHA script loading</li>
-        <li class="step1 hidden"><kbd>grecaptcha.ready()</kbd> fired, calling <pre>grecaptcha.execute('<?php echo $siteKey; ?>', {action: '<?php echo $pageAction; ?>'})'</pre></li>
-        <li class="step2 hidden">Received token from reCAPTCHA service, sending to our backend with:
-        <pre class="token">fetch('/recaptcha-v3-verify.php?token=abc123</pre></li>
-        <li class="step3 hidden">Received response from our backend: <pre class="response">{"json": "from-backend"}</pre></li>
-    </ol>
-    <p><a href="/recaptcha-content-security-policy.php">⤴️ Try again</a></p>
-
-    <!-- Add the nonce for our inline script to this tag -->
-    <script nonce="<?php echo $nonce; ?>">
-    var onloadCallback = function() {
-        const steps = document.getElementById('recaptcha-steps');
-        grecaptcha.ready(function() {
-            document.querySelector('.step1').classList.remove('hidden');
-            grecaptcha.execute('<?php echo $siteKey; ?>', {action: '<?php echo $pageAction; ?>'}).then(function(token) {
-                document.querySelector('.token').innerHTML = 'fetch(\'/recaptcha-v3-verify.php?action=<?php echo $pageAction; ?>&token=\'' + token;
-                document.querySelector('.step2').classList.remove('hidden');
-
-                fetch('/recaptcha-v3-verify.php?action=<?php echo $pageAction; ?>&token='+token).then(function(response) {
-                    response.json().then(function(data) {
-                        document.querySelector('.response').innerHTML = JSON.stringify(data, null, 2);
-                        document.querySelector('.step3').classList.remove('hidden');
-                    });
-                });
-            });
-        });
-    };
-    </script>
-    <!-- Add the nonce value for the reCAPTCHA library to its script tag -->
-    <script async defer src="https://www.google.com/recaptcha/api.js?render=<?php echo $siteKey; ?>&onload=onloadCallback" nonce="<?php echo $nonce; ?>"></script>
-
-<?php
-endif;?>
-</main>
-
-<!-- Google Analytics - adding nonces here for the library and the inline code -->
-<script async defer src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1" nonce="<?php echo $nonce; ?>"></script>
-<script async nonce="<?php echo $nonce; ?>">window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-v2-checkbox-explicit.php b/examples/recaptcha-v2-checkbox-explicit.php
deleted file mode 100644
index fb429a2..0000000
--- a/examples/recaptcha-v2-checkbox-explicit.php
+++ /dev/null
@@ -1,148 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
-// Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v2-standard']['site'];
-    $secret = $config['v2-standard']['secret'];
-}
-
-// reCAPTCHA supports 40+ languages listed here: https://developers.google.com/recaptcha/docs/language
-$lang = 'en';
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox-explicit.php">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo - \"I'm not a robot\" checkbox - Explicit render", "url": "https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox-explicit.php" }</script>
-<meta name="description" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox - Explicit render" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox-explicit.php" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox - Explicit render" />
-<meta property="og:description" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox - Explicit render" />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo - "I'm not a robot" checkbox - Explicit render</title>
-
-<header>
-    <h1>reCAPTCHA demo</h1><h2>"I'm not a robot" checkbox - Explicit render</h2>
-    <p><a href="/">↩️ Home</a></p>
-</header>
-<main>
-<?php
-if ($siteKey === '' || $secret === ''):
-?>
-    <h2>Add your keys</h2>
-    <p>If you do not have keys already then visit <kbd> <a href = "https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></kbd> to generate them. Edit this file and set the respective keys in the <kbd>config.php</kbd> file or directly to <kbd>$siteKey</kbd> and <kbd>$secret</kbd>. Reload the page after this.</p>
-    <?php
-elseif (isset($_POST['g-recaptcha-response'])):
-    // The POST data here is unfiltered because this is an example.
-    // In production, *always* sanitise and validate your input'
-    ?>
-        <h2><kbd>POST</kbd> data</h2>
-        <kbd><pre><?php var_export($_POST);?></pre></kbd>
-        <?php
-    // If the form submission includes the "g-captcha-response" field
-    // Create an instance of the service using your secret
-    $recaptcha = new \ReCaptcha\ReCaptcha($secret);
-
-    // If file_get_contents() is locked down on your PHP installation to disallow
-    // its use with URLs, then you can use the alternative request method instead.
-    // This makes use of fsockopen() instead.
-    //  $recaptcha = new \ReCaptcha\ReCaptcha($secret, new \ReCaptcha\RequestMethod\SocketPost());
-    // Make the call to verify the response and also pass the user's IP address
-    $resp = $recaptcha->setExpectedHostname($_SERVER['SERVER_NAME'])
-                      ->verify($_POST['g-recaptcha-response'], $_SERVER['REMOTE_ADDR']);
-
-    if ($resp->isSuccess()):
-        // If the response is a success, that's it!
-        ?>
-        <h2>Success!</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>That's it. Everything is working. Go integrate this into your real project.</p>
-        <p><a href="/recaptcha-v2-checkbox-explicit.php">⤴️ Try again</a></p>
-        <?php
-    else:
-        // If it's not successful, then one or more error codes will be returned.
-        ?>
-        <h2>Something went wrong</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>Check the error code reference at <kbd><a href="https://developers.google.com/recaptcha/docs/verify#error-code-reference">https://developers.google.com/recaptcha/docs/verify#error-code-reference</a></kbd>.
-        <p><strong>Note:</strong> Error code <kbd>missing-input-response</kbd> may mean the user just didn't complete the reCAPTCHA.</p>
-        <p><a href="/recaptcha-v2-checkbox-explicit.php">⤴️ Try again</a></p>
-        <?php
-    endif;
-else:
-    // Add the g-recaptcha tag to the form you want to include the reCAPTCHA element
-    ?>
-    <p>Complete the reCAPTCHA then submit the form.</p>
-    <form action="/recaptcha-v2-checkbox-explicit.php" method="post">
-        <fieldset>
-            <legend>An example form</legend>
-            <label class="form-field">Example input A: <input type="text" name="ex-a" value="foo"></label>
-            <label class="form-field">Example input B: <input type="text" name="ex-b" value="bar"></label>
-            <!-- Set up a container to render the widget -->
-            <div class="g-recaptcha form-field"></div>
-            <!-- Disable the button by default, will enable when the widget loads -->
-            <button class="form-field" type="submit" disabled>Submit ↦</button>
-        </fieldset>
-    </form>
-    <script type="text/javascript">
-    var onloadCallback = function() {
-        var captchaContainer = document.querySelector('.g-recaptcha');
-        grecaptcha.render(captchaContainer, {
-          'sitekey' : '<?php echo $siteKey; ?>'
-        });
-        document.querySelector('button[type="submit"]').disabled = false;
-    };
-    </script>
-    <script type="text/javascript" src="https://www.google.com/recaptcha/api.js?hl=<?php echo $lang; ?>&onload=onloadCallback&render=explicit" async defer></script>
-    <?php
-endif;?>
-</main>
-
-<!-- Google Analytics - just ignore this -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1"></script>
-<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-v2-checkbox.php b/examples/recaptcha-v2-checkbox.php
deleted file mode 100644
index 9395d59..0000000
--- a/examples/recaptcha-v2-checkbox.php
+++ /dev/null
@@ -1,139 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
- // Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v2-standard']['site'];
-    $secret = $config['v2-standard']['secret'];
-}
-
-// reCAPTCHA supports 40+ languages listed here: https://developers.google.com/recaptcha/docs/language
-$lang = 'en';
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox.php">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo - \"I'm not a robot\" checkbox", "url": "https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox.php" }</script>
-<meta name="description" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/recaptcha-v2-checkbox.php" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox" />
-<meta property="og:description" content="reCAPTCHA demo - &quot;I'm not a robot&quot; checkbox" />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo - "I'm not a robot" checkbox</title>
-
-<header>
-    <h1>reCAPTCHA demo</h1><h2>"I'm not a robot" checkbox</h2>
-    <p><a href="/">↩️ Home</a></p>
-</header>
-<main>
-<?php
-if ($siteKey === '' || $secret === ''):
-?>
-    <h2>Add your keys</h2>
-    <p>If you do not have keys already then visit <kbd> <a href = "https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></kbd> to generate them. Edit this file and set the respective keys in the <kbd>config.php</kbd> file or directly to <kbd>$siteKey</kbd> and <kbd>$secret</kbd>. Reload the page after this.</p>
-    <?php
-elseif (isset($_POST['g-recaptcha-response'])):
-    // The POST data here is unfiltered because this is an example.
-    // In production, *always* sanitise and validate your input'
-    ?>
-        <h2><kbd>POST</kbd> data</h2>
-        <kbd><pre><?php var_export($_POST);?></pre></kbd>
-        <?php
-    // If the form submission includes the "g-captcha-response" field
-    // Create an instance of the service using your secret
-    $recaptcha = new \ReCaptcha\ReCaptcha($secret);
-
-    // If file_get_contents() is locked down on your PHP installation to disallow
-    // its use with URLs, then you can use the alternative request method instead.
-    // This makes use of fsockopen() instead.
-    //  $recaptcha = new \ReCaptcha\ReCaptcha($secret, new \ReCaptcha\RequestMethod\SocketPost());
-
-    // Make the call to verify the response and also pass the user's IP address
-    $resp = $recaptcha->setExpectedHostname($_SERVER['SERVER_NAME'])
-                      ->verify($_POST['g-recaptcha-response'], $_SERVER['REMOTE_ADDR']);
-    if ($resp->isSuccess()):
-        // If the response is a success, that's it!
-        ?>
-        <h2>Success!</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>That's it. Everything is working. Go integrate this into your real project.</p>
-        <p><a href="/recaptcha-v2-checkbox.php">⤴️ Try again</a></p>
-        <?php
-    else:
-        // If it's not successful, then one or more error codes will be returned.
-        ?>
-        <h2>Something went wrong</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>Check the error code reference at <kbd><a href="https://developers.google.com/recaptcha/docs/verify#error-code-reference">https://developers.google.com/recaptcha/docs/verify#error-code-reference</a></kbd>.
-        <p><strong>Note:</strong> Error code <kbd>missing-input-response</kbd> may mean the user just didn't complete the reCAPTCHA.</p>
-        <p><a href="/recaptcha-v2-checkbox.php">⤴️ Try again</a></p>
-        <?php
-    endif;
-else:
-    // Add the g-recaptcha tag to the form you want to include the reCAPTCHA element
-    ?>
-    <p>Complete the reCAPTCHA then submit the form.</p>
-    <form action="/recaptcha-v2-checkbox.php" method="post">
-        <fieldset>
-            <legend>An example form</legend>
-            <label class="form-field">Example input A: <input type="text" name="ex-a" value="foo"></label>
-            <label class="form-field">Example input B: <input type="text" name="ex-b" value="bar"></label>
-            <!-- Default behaviour looks for the g-recaptcha class with a data-sitekey attribute -->
-            <div class="g-recaptcha form-field" data-sitekey="<?php echo $siteKey; ?>"></div>
-            <!-- Submitting before the widget loads will result in a missing-input-response error so you need to verify server side -->
-            <button class="form-field" type="submit">Submit ↦</button>
-        </fieldset>
-    </form>
-    <script type="text/javascript" src="https://www.google.com/recaptcha/api.js?hl=<?php echo $lang; ?>"></script>
-    <?php
-endif;?>
-</main>
-
-<!-- Google Analytics - just ignore this -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1"></script>
-<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-v2-invisible.php b/examples/recaptcha-v2-invisible.php
deleted file mode 100644
index c3b9397..0000000
--- a/examples/recaptcha-v2-invisible.php
+++ /dev/null
@@ -1,141 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
- // Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v2-invisible']['site'];
-    $secret = $config['v2-invisible']['secret'];
-}
-
-// reCAPTCHA supports 40+ languages listed here: https://developers.google.com/recaptcha/docs/language
-$lang = 'en';
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/recaptcha-v2-invisible.php">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo - Invisible", "url": "https://recaptcha-demo.appspot.com/recaptcha-v2-invisible.php" }</script>
-<meta name="description" content="reCAPTCHA demo - Invisible" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/recaptcha-v2-invisible.php" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo - Invisible" />
-<meta property="og:description" content="reCAPTCHA demo - Invisible" />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo - Invisible</title>
-
-<header>
-    <h1>reCAPTCHA demo</h1><h2>Invisible</h2>
-    <p><a href="/">↩️ Home</a></p>
-</header>
-<main>
-<?php
-if ($siteKey === '' || $secret === ''):
-?>
-    <h2>Add your keys</h2>
-    <p>If you do not have keys already then visit <kbd> <a href = "https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></kbd> to generate them. Edit this file and set the respective keys in <kbd>$siteKey</kbd> and <kbd>$secret</kbd>. Reload the page after this.</p>
-    <?php
-elseif (isset($_POST['g-recaptcha-response'])):
-    // The POST data here is unfiltered because this is an example.
-    // In production, *always* sanitise and validate your input'
-    ?>
-        <h2><kbd>POST</kbd> data</h2>
-        <kbd><pre><?php var_export($_POST);?></pre></kbd>
-        <?php
-    // If the form submission includes the "g-captcha-response" field
-    // Create an instance of the service using your secret
-    $recaptcha = new \ReCaptcha\ReCaptcha($secret);
-
-    // If file_get_contents() is locked down on your PHP installation to disallow
-    // its use with URLs, then you can use the alternative request method instead.
-    // This makes use of fsockopen() instead.
-    //  $recaptcha = new \ReCaptcha\ReCaptcha($secret, new \ReCaptcha\RequestMethod\SocketPost());
-
-    // Make the call to verify the response and also pass the user's IP address
-    $resp = $recaptcha->setExpectedHostname($_SERVER['SERVER_NAME'])
-                      ->verify($_POST['g-recaptcha-response'], $_SERVER['REMOTE_ADDR']);
-    if ($resp->isSuccess()):
-        // If the response is a success, that's it!
-        ?>
-        <h2>Success!</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>That's it. Everything is working. Go integrate this into your real project.</p>
-        <p><a href="/recaptcha-v2-invisible.php">⤴️ Try again</a></p>
-        <?php
-    else:
-        // If it's not successful, then one or more error codes will be returned.
-        ?>
-        <h2>Something went wrong</h2>
-        <kbd><pre><?php var_export($resp);?></pre></kbd>
-        <p>Check the error code reference at <kbd><a href="https://developers.google.com/recaptcha/docs/verify#error-code-reference">https://developers.google.com/recaptcha/docs/verify#error-code-reference</a></kbd>.
-        <p><strong>Note:</strong> Error code <kbd>missing-input-response</kbd> may mean the user just didn't complete the reCAPTCHA.</p>
-        <p><a href="/recaptcha-v2-invisible.php">⤴️ Try again</a></p>
-        <?php
-    endif;
-else:
-    // Add the g-recaptcha tag to the form you want to include the reCAPTCHA element
-    ?>
-    <p>Submit the form and reCAPTCHA will run automatically.</p>
-    <form action="/recaptcha-v2-invisible.php" method="post" id="demo-form">
-        <fieldset>
-            <legend>An example form</legend>
-            <label class="form-field">Example input A: <input type="text" name="ex-a" value="foo"></label>
-            <label class="form-field">Example input B: <input type="text" name="ex-b" value="bar"></label>
-            <button class="g-recaptcha form-field" data-sitekey="<?php echo $siteKey; ?>" data-callback='onSubmit'>Submit ↦</button>
-        </fieldset>
-    </form>
-    <script type="text/javascript" src="https://www.google.com/recaptcha/api.js?hl=<?php echo $lang; ?>" async defer></script>
-    <script type="text/javascript">
-        function onSubmit(token) {
-            document.getElementById("demo-form").submit();
-        }
-    </script>
-    <?php
-endif;?>
-</main>
-
-<!-- Google Analytics - just ignore this -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1"></script>
-<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-v3-request-scores.php b/examples/recaptcha-v3-request-scores.php
deleted file mode 100644
index d9430bb..0000000
--- a/examples/recaptcha-v3-request-scores.php
+++ /dev/null
@@ -1,120 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
-// Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v3']['site'];
-    $secret = $config['v3']['secret'];
-}
-
-// reCAPTCHA supports 40+ languages listed here: https://developers.google.com/recaptcha/docs/language
-$lang = 'en';
-
-// The v3 API lets you provide some context for the check by specifying an action.
-// See: https://developers.google.com/recaptcha/docs/v3
-$pageAction = 'examples/v3scores';
-
-?>
-<!DOCTYPE html>
-<html lang="en">
-<meta charset="UTF-8">
-<meta name="viewport" content="width=device-width,height=device-height,minimum-scale=1">
-<link rel="shortcut icon" href="https://www.gstatic.com/recaptcha/admin/favicon.ico" type="image/x-icon"/>
-<link rel="canonical" href="https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php">
-<script type="application/ld+json">{ "@context": "http://schema.org", "@type": "WebSite", "name": "reCAPTCHA demo - Request scores", "url": "https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php" }</script>
-<meta name="description" content="reCAPTCHA demo - Request scores" />
-<meta property="og:url" content="https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php" />
-<meta property="og:type" content="website" />
-<meta property="og:title" content="reCAPTCHA demo - Request scores" />
-<meta property="og:description" content="reCAPTCHA demo - Request scores" />
-<link rel="stylesheet" type="text/css" href="/examples.css">
-<title>reCAPTCHA demo - Request scores</title>
-<header>
-    <h1>reCAPTCHA demo</h1><h2>Request scores</h2>
-    <p><a href="/">↩️ Home</a></p>
-</header>
-<main>
-<?php
-if ($siteKey === '' || $secret === ''):
-?>
-    <h2>Add your keys</h2>
-    <p>If you do not have keys already then visit <kbd> <a href = "https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></kbd> to generate them. Edit this file and set the respective keys in <kbd>$siteKey</kbd> and <kbd>$secret</kbd>. Reload the page after this.</p>
-    <?php
-else:
-    // Add the g-recaptcha tag to the form you want to include the reCAPTCHA element
-    ?>
-    <p>The reCAPTCHA v3 API provides a confidence score for each request.</p>
-    <p><strong>NOTE:</strong>This is a sample implementation, the score returned here is not a reflection on your Google account or type of traffic. In production, refer to the distribution of scores shown in <a href="https://www.google.com/recaptcha/admin" target="_blank">your admin interface</a> and adjust your own threshold accordingly. <strong>Do not raise issues regarding the score you see here.</strong></p>
-    <ol id="recaptcha-steps">
-        <li class="step0">reCAPTCHA script loading</li>
-        <li class="step1 hidden"><kbd>grecaptcha.ready()</kbd> fired, calling <pre>grecaptcha.execute('<?php echo $siteKey; ?>', {action: '<?php echo $pageAction; ?>'})'</pre></li>
-        <li class="step2 hidden">Received token from reCAPTCHA service, sending to our backend with:
-        <pre class="token">fetch('/recaptcha-v3-verify.php?token=abc123</pre></li>
-        <li class="step3 hidden">Received response from our backend: <pre class="response">{"json": "from-backend"}</pre></li>
-    </ol>
-    <p><a href="/recaptcha-v3-request-scores.php">⤴️ Try again</a></p>
-    <script src="https://www.google.com/recaptcha/api.js?render=<?php echo $siteKey; ?>"></script>
-    <script>
-        const steps = document.getElementById('recaptcha-steps');
-        grecaptcha.ready(function() {
-            document.querySelector('.step1').classList.remove('hidden');
-            grecaptcha.execute('<?php echo $siteKey; ?>', {action: '<?php echo $pageAction; ?>'}).then(function(token) {
-                document.querySelector('.token').innerHTML = 'fetch(\'/recaptcha-v3-verify.php?action=<?php echo $pageAction; ?>&token=\'' + token;
-                document.querySelector('.step2').classList.remove('hidden');
-
-                fetch('/recaptcha-v3-verify.php?action=<?php echo $pageAction; ?>&token='+token).then(function(response) {
-                    response.json().then(function(data) {
-                        document.querySelector('.response').innerHTML = JSON.stringify(data, null, 2);
-                        document.querySelector('.step3').classList.remove('hidden');
-                    });
-                });
-            });
-        });
-    </script>
-    <?php
-endif;?>
-</main>
-<!-- Google Analytics - just ignore this -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=UA-123057962-1"></script>
-<script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-123057962-1');</script>
diff --git a/examples/recaptcha-v3-verify.php b/examples/recaptcha-v3-verify.php
deleted file mode 100644
index 3b6517a..0000000
--- a/examples/recaptcha-v3-verify.php
+++ /dev/null
@@ -1,59 +0,0 @@
-<?php
-/**
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-require __DIR__ . '/appengine-https.php';
-
-// Initiate the autoloader. The file should be generated by Composer.
-// You will provide your own autoloader or require the files directly if you did
-// not install via Composer.
-require_once __DIR__ . '/../vendor/autoload.php';
-
-// Register API keys at https://www.google.com/recaptcha/admin
-$siteKey = '';
-$secret = '';
-
-// Copy the config.php.dist file to config.php and update it with your keys to run the examples
-if ($siteKey == '' && is_readable(__DIR__ . '/config.php')) {
-    $config = include __DIR__ . '/config.php';
-    $siteKey = $config['v3']['site'];
-    $secret = $config['v3']['secret'];
-}
-
-// Effectively we're providing an API endpoint here that will accept the token, verify it, and return the action / score to the page
-// In production, always sanitize and validate the input you retrieve from the request.
-$recaptcha = new \ReCaptcha\ReCaptcha($secret);
-$resp = $recaptcha->setExpectedHostname($_SERVER['SERVER_NAME'])
-                  ->setExpectedAction($_GET['action'])
-                  ->setScoreThreshold(0.5)
-                  ->verify($_GET['token'], $_SERVER['REMOTE_ADDR']);
-header('Content-type:application/json');
-echo json_encode($resp->toArray());
diff --git a/examples/robots.txt b/examples/robots.txt
deleted file mode 100644
index eb05362..0000000
--- a/examples/robots.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-User-agent: *
-Disallow:
diff --git a/tests/ReCaptcha/ReCaptchaTest.php b/tests/ReCaptcha/ReCaptchaTest.php
deleted file mode 100644
index ddb16f0..0000000
--- a/tests/ReCaptcha/ReCaptchaTest.php
+++ /dev/null
@@ -1,198 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha;
-
-use PHPUnit\Framework\TestCase;
-
-class ReCaptchaTest extends TestCase
-{
-
-    /**
-     * @expectedException \RuntimeException
-     * @dataProvider invalidSecretProvider
-     */
-    public function testExceptionThrownOnInvalidSecret($invalid)
-    {
-        $rc = new ReCaptcha($invalid);
-    }
-
-    public function invalidSecretProvider()
-    {
-        return array(
-            array(''),
-            array(null),
-            array(0),
-            array(new \stdClass()),
-            array(array()),
-        );
-    }
-
-    public function testVerifyReturnsErrorOnMissingResponse()
-    {
-        $rc = new ReCaptcha('secret');
-        $response = $rc->verify('');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(Recaptcha::E_MISSING_INPUT_RESPONSE), $response->getErrorCodes());
-    }
-
-    private function getMockRequestMethod($responseJson)
-    {
-        $method = $this->getMockBuilder(\ReCaptcha\RequestMethod::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('submit'))
-            ->getMock();
-        $method->expects($this->any())
-            ->method('submit')
-            ->with($this->callback(function ($params) {
-                return true;
-            }))
-            ->will($this->returnValue($responseJson));
-        return $method;
-    }
-
-    public function testVerifyReturnsResponse()
-    {
-        $method = $this->getMockRequestMethod('{"success": true}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyReturnsInitialResponseWithoutAdditionalChecks()
-    {
-        $method = $this->getMockRequestMethod('{"success": true}');
-        $rc = new ReCaptcha('secret', $method);
-        $initialResponse = $rc->verify('response');
-        $this->assertEquals($initialResponse, $rc->verify('response'));
-    }
-
-    public function testVerifyHostnameMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "hostname": "host.name"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedHostname('host.name')->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyHostnameMisMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "hostname": "host.NOTname"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedHostname('host.name')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(ReCaptcha::E_HOSTNAME_MISMATCH), $response->getErrorCodes());
-    }
-
-    public function testVerifyApkPackageNameMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "apk_package_name": "apk.name"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedApkPackageName('apk.name')->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyApkPackageNameMisMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "apk_package_name": "apk.NOTname"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedApkPackageName('apk.name')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(ReCaptcha::E_APK_PACKAGE_NAME_MISMATCH), $response->getErrorCodes());
-    }
-
-    public function testVerifyActionMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "action": "action/name"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedAction('action/name')->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyActionMisMatch()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "action": "action/NOTname"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setExpectedAction('action/name')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(ReCaptcha::E_ACTION_MISMATCH), $response->getErrorCodes());
-    }
-
-    public function testVerifyAboveThreshold()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "score": "0.9"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setScoreThreshold('0.5')->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyBelowThreshold()
-    {
-        $method = $this->getMockRequestMethod('{"success": true, "score": "0.1"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setScoreThreshold('0.5')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(ReCaptcha::E_SCORE_THRESHOLD_NOT_MET), $response->getErrorCodes());
-    }
-
-    public function testVerifyWithinTimeout()
-    {
-        // Responses come back like 2018-07-31T13:48:41Z
-        $challengeTs = date('Y-M-d\TH:i:s\Z', time());
-        $method = $this->getMockRequestMethod('{"success": true, "challenge_ts": "'.$challengeTs.'"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setChallengeTimeout('1000')->verify('response');
-        $this->assertTrue($response->isSuccess());
-    }
-
-    public function testVerifyOverTimeout()
-    {
-        // Responses come back like 2018-07-31T13:48:41Z
-        $challengeTs = date('Y-M-d\TH:i:s\Z', time() - 600);
-        $method = $this->getMockRequestMethod('{"success": true, "challenge_ts": "'.$challengeTs.'"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setChallengeTimeout('60')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array(ReCaptcha::E_CHALLENGE_TIMEOUT), $response->getErrorCodes());
-    }
-
-    public function testVerifyMergesErrors()
-    {
-        $method = $this->getMockRequestMethod('{"success": false, "error-codes": ["initial-error"], "score": "0.1"}');
-        $rc = new ReCaptcha('secret', $method);
-        $response = $rc->setScoreThreshold('0.5')->verify('response');
-        $this->assertFalse($response->isSuccess());
-        $this->assertEquals(array('initial-error', ReCaptcha::E_SCORE_THRESHOLD_NOT_MET), $response->getErrorCodes());
-    }
-}
diff --git a/tests/ReCaptcha/RequestMethod/CurlPostTest.php b/tests/ReCaptcha/RequestMethod/CurlPostTest.php
deleted file mode 100644
index 8fb17dc..0000000
--- a/tests/ReCaptcha/RequestMethod/CurlPostTest.php
+++ /dev/null
@@ -1,123 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha\RequestMethod;
-
-use \ReCaptcha\ReCaptcha;
-use \ReCaptcha\RequestParameters;
-use PHPUnit\Framework\TestCase;
-
-class CurlPostTest extends TestCase
-{
-    protected function setUp()
-    {
-        if (!extension_loaded('curl')) {
-            $this->markTestSkipped(
-                'The cURL extension is not available.'
-            );
-        }
-    }
-
-    public function testSubmit()
-    {
-        $curl = $this->getMockBuilder(\ReCaptcha\RequestMethod\Curl::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('init', 'setoptArray', 'exec', 'close'))
-            ->getMock();
-        $curl->expects($this->once())
-                ->method('init')
-                ->willReturn(new \stdClass);
-        $curl->expects($this->once())
-                ->method('setoptArray')
-                ->willReturn(true);
-        $curl->expects($this->once())
-                ->method('exec')
-                ->willReturn('RESPONSEBODY');
-        $curl->expects($this->once())
-                ->method('close');
-
-        $pc = new CurlPost($curl);
-        $response = $pc->submit(new RequestParameters("secret", "response"));
-        $this->assertEquals('RESPONSEBODY', $response);
-    }
-
-    public function testOverrideSiteVerifyUrl()
-    {
-        $url = 'OVERRIDE';
-
-        $curl = $this->getMockBuilder(\ReCaptcha\RequestMethod\Curl::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('init', 'setoptArray', 'exec', 'close'))
-            ->getMock();
-        $curl->expects($this->once())
-                ->method('init')
-                ->with($url)
-                ->willReturn(new \stdClass);
-        $curl->expects($this->once())
-                ->method('setoptArray')
-                ->willReturn(true);
-        $curl->expects($this->once())
-                ->method('exec')
-                ->willReturn('RESPONSEBODY');
-        $curl->expects($this->once())
-                ->method('close');
-
-        $pc = new CurlPost($curl, $url);
-        $response = $pc->submit(new RequestParameters("secret", "response"));
-        $this->assertEquals('RESPONSEBODY', $response);
-    }
-
-    public function testConnectionFailureReturnsError()
-    {
-        $curl = $this->getMockBuilder(\ReCaptcha\RequestMethod\Curl::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('init', 'setoptArray', 'exec', 'close'))
-            ->getMock();
-        $curl->expects($this->once())
-                ->method('init')
-                ->willReturn(new \stdClass);
-        $curl->expects($this->once())
-                ->method('setoptArray')
-                ->willReturn(true);
-        $curl->expects($this->once())
-                ->method('exec')
-                ->willReturn(false);
-        $curl->expects($this->once())
-                ->method('close');
-
-        $pc = new CurlPost($curl);
-        $response = $pc->submit(new RequestParameters("secret", "response"));
-        $this->assertEquals('{"success": false, "error-codes": ["'.ReCaptcha::E_CONNECTION_FAILED.'"]}', $response);
-    }
-}
diff --git a/tests/ReCaptcha/RequestMethod/PostTest.php b/tests/ReCaptcha/RequestMethod/PostTest.php
deleted file mode 100644
index bdfb78e..0000000
--- a/tests/ReCaptcha/RequestMethod/PostTest.php
+++ /dev/null
@@ -1,149 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha\RequestMethod;
-
-use \ReCaptcha\ReCaptcha;
-use ReCaptcha\RequestParameters;
-use PHPUnit\Framework\TestCase;
-
-class PostTest extends TestCase
-{
-    public static $assert = null;
-    protected $parameters = null;
-    protected $runcount = 0;
-
-    public function setUp()
-    {
-        $this->parameters = new RequestParameters('secret', 'response', 'remoteip', 'version');
-    }
-
-    public function tearDown()
-    {
-        self::$assert = null;
-    }
-
-    public function testHTTPContextOptions()
-    {
-        $req = new Post();
-        self::$assert = array($this, 'httpContextOptionsCallback');
-        $req->submit($this->parameters);
-        $this->assertEquals(1, $this->runcount, 'The assertion was ran');
-    }
-
-    public function testSSLContextOptions()
-    {
-        $req = new Post();
-        self::$assert = array($this, 'sslContextOptionsCallback');
-        $req->submit($this->parameters);
-        $this->assertEquals(1, $this->runcount, 'The assertion was ran');
-    }
-
-    public function testOverrideVerifyUrl()
-    {
-        $req = new Post('https://over.ride/some/path');
-        self::$assert = array($this, 'overrideUrlOptions');
-        $req->submit($this->parameters);
-        $this->assertEquals(1, $this->runcount, 'The assertion was ran');
-    }
-
-    public function testConnectionFailureReturnsError()
-    {
-        $req = new Post('https://bad.connection/');
-        self::$assert = array($this, 'connectionFailureResponse');
-        $response = $req->submit($this->parameters);
-        $this->assertEquals('{"success": false, "error-codes": ["'.ReCaptcha::E_CONNECTION_FAILED.'"]}', $response);
-    }
-
-    public function connectionFailureResponse()
-    {
-        return false;
-    }
-    public function overrideUrlOptions(array $args)
-    {
-        $this->runcount++;
-        $this->assertEquals('https://over.ride/some/path', $args[0]);
-    }
-
-    public function httpContextOptionsCallback(array $args)
-    {
-        $this->runcount++;
-        $this->assertCommonOptions($args);
-
-        $options = stream_context_get_options($args[2]);
-        $this->assertArrayHasKey('http', $options);
-
-        $this->assertArrayHasKey('method', $options['http']);
-        $this->assertEquals('POST', $options['http']['method']);
-
-        $this->assertArrayHasKey('content', $options['http']);
-        $this->assertEquals($this->parameters->toQueryString(), $options['http']['content']);
-
-        $this->assertArrayHasKey('header', $options['http']);
-        $headers = array(
-            'Content-type: application/x-www-form-urlencoded',
-        );
-        foreach ($headers as $header) {
-            $this->assertContains($header, $options['http']['header']);
-        }
-    }
-
-    public function sslContextOptionsCallback(array $args)
-    {
-        $this->runcount++;
-        $this->assertCommonOptions($args);
-
-        $options = stream_context_get_options($args[2]);
-        $this->assertArrayHasKey('http', $options);
-        $this->assertArrayHasKey('verify_peer', $options['http']);
-        $this->assertTrue($options['http']['verify_peer']);
-    }
-
-    protected function assertCommonOptions(array $args)
-    {
-        $this->assertCount(3, $args);
-        $this->assertStringStartsWith('https://www.google.com/', $args[0]);
-        $this->assertFalse($args[1]);
-        $this->assertTrue(is_resource($args[2]), 'The context options should be a resource');
-    }
-}
-
-function file_get_contents()
-{
-    if (PostTest::$assert) {
-        return call_user_func(PostTest::$assert, func_get_args());
-    }
-    // Since we can't represent maxlen in userland...
-    return call_user_func_array('file_get_contents', func_get_args());
-}
diff --git a/tests/ReCaptcha/RequestMethod/SocketPostTest.php b/tests/ReCaptcha/RequestMethod/SocketPostTest.php
deleted file mode 100644
index d9e1ede..0000000
--- a/tests/ReCaptcha/RequestMethod/SocketPostTest.php
+++ /dev/null
@@ -1,136 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha\RequestMethod;
-
-use ReCaptcha\ReCaptcha;
-use ReCaptcha\RequestParameters;
-use PHPUnit\Framework\TestCase;
-
-class SocketPostTest extends TestCase
-{
-    public function testSubmitSuccess()
-    {
-        $socket = $this->getMockBuilder(\ReCaptcha\RequestMethod\Socket::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('fsockopen', 'fwrite', 'fgets', 'feof', 'fclose'))
-            ->getMock();
-        $socket->expects($this->once())
-                ->method('fsockopen')
-                ->willReturn(true);
-        $socket->expects($this->once())
-                ->method('fwrite');
-        $socket->expects($this->once())
-                ->method('fgets')
-                ->willReturn("HTTP/1.0 200 OK\n\nRESPONSEBODY");
-        $socket->expects($this->exactly(2))
-                ->method('feof')
-                ->will($this->onConsecutiveCalls(false, true));
-        $socket->expects($this->once())
-                ->method('fclose')
-                ->willReturn(true);
-
-        $ps = new SocketPost($socket);
-        $response = $ps->submit(new RequestParameters("secret", "response", "remoteip", "version"));
-        $this->assertEquals('RESPONSEBODY', $response);
-    }
-
-    public function testOverrideSiteVerifyUrl()
-    {
-        $socket = $this->getMockBuilder(\ReCaptcha\RequestMethod\Socket::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('fsockopen', 'fwrite', 'fgets', 'feof', 'fclose'))
-            ->getMock();
-        $socket->expects($this->once())
-                ->method('fsockopen')
-                ->with('ssl://over.ride', 443, 0, '', 30)
-                ->willReturn(true);
-        $socket->expects($this->once())
-                ->method('fwrite')
-                ->with($this->matchesRegularExpression('/^POST \/some\/path.*Host: over\.ride/s'));
-        $socket->expects($this->once())
-                ->method('fgets')
-                ->willReturn("HTTP/1.0 200 OK\n\nRESPONSEBODY");
-        $socket->expects($this->exactly(2))
-                ->method('feof')
-                ->will($this->onConsecutiveCalls(false, true));
-        $socket->expects($this->once())
-                ->method('fclose')
-                ->willReturn(true);
-
-        $ps = new SocketPost($socket, 'https://over.ride/some/path');
-        $response = $ps->submit(new RequestParameters("secret", "response", "remoteip", "version"));
-        $this->assertEquals('RESPONSEBODY', $response);
-    }
-
-    public function testSubmitBadResponse()
-    {
-        $socket = $this->getMockBuilder(\ReCaptcha\RequestMethod\Socket::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('fsockopen', 'fwrite', 'fgets', 'feof', 'fclose'))
-            ->getMock();
-        $socket->expects($this->once())
-                ->method('fsockopen')
-                ->willReturn(true);
-        $socket->expects($this->once())
-                ->method('fwrite');
-        $socket->expects($this->once())
-                ->method('fgets')
-                ->willReturn("HTTP/1.0 500 NOPEn\\nBOBBINS");
-        $socket->expects($this->exactly(2))
-                ->method('feof')
-                ->will($this->onConsecutiveCalls(false, true));
-        $socket->expects($this->once())
-                ->method('fclose')
-                ->willReturn(true);
-
-        $ps = new SocketPost($socket);
-        $response = $ps->submit(new RequestParameters("secret", "response", "remoteip", "version"));
-        $this->assertEquals('{"success": false, "error-codes": ["'.ReCaptcha::E_BAD_RESPONSE.'"]}', $response);
-    }
-
-    public function testConnectionFailureReturnsError()
-    {
-        $socket = $this->getMockBuilder(\ReCaptcha\RequestMethod\Socket::class)
-            ->disableOriginalConstructor()
-            ->setMethods(array('fsockopen'))
-            ->getMock();
-        $socket->expects($this->once())
-                ->method('fsockopen')
-                ->willReturn(false);
-        $ps = new SocketPost($socket);
-        $response = $ps->submit(new RequestParameters("secret", "response", "remoteip", "version"));
-        $this->assertEquals('{"success": false, "error-codes": ["'.ReCaptcha::E_CONNECTION_FAILED.'"]}', $response);
-    }
-}
diff --git a/tests/ReCaptcha/RequestParametersTest.php b/tests/ReCaptcha/RequestParametersTest.php
deleted file mode 100644
index fafded2..0000000
--- a/tests/ReCaptcha/RequestParametersTest.php
+++ /dev/null
@@ -1,70 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha;
-
-use PHPUnit\Framework\TestCase;
-
-class RequestParametersTest extends Testcase
-{
-    public function provideValidData()
-    {
-        return array(
-            array('SECRET', 'RESPONSE', 'REMOTEIP', 'VERSION',
-                array('secret' => 'SECRET', 'response' => 'RESPONSE', 'remoteip' => 'REMOTEIP', 'version' => 'VERSION'),
-                'secret=SECRET&response=RESPONSE&remoteip=REMOTEIP&version=VERSION'),
-            array('SECRET', 'RESPONSE', null, null,
-                array('secret' => 'SECRET', 'response' => 'RESPONSE'),
-                'secret=SECRET&response=RESPONSE'),
-        );
-    }
-
-    /**
-     * @dataProvider provideValidData
-     */
-    public function testToArray($secret, $response, $remoteIp, $version, $expectedArray, $expectedQuery)
-    {
-        $params = new RequestParameters($secret, $response, $remoteIp, $version);
-        $this->assertEquals($params->toArray(), $expectedArray);
-    }
-
-    /**
-     * @dataProvider provideValidData
-     */
-    public function testToQueryString($secret, $response, $remoteIp, $version, $expectedArray, $expectedQuery)
-    {
-        $params = new RequestParameters($secret, $response, $remoteIp, $version);
-        $this->assertEquals($params->toQueryString(), $expectedQuery);
-    }
-}
diff --git a/tests/ReCaptcha/ResponseTest.php b/tests/ReCaptcha/ResponseTest.php
deleted file mode 100644
index 7894c2a..0000000
--- a/tests/ReCaptcha/ResponseTest.php
+++ /dev/null
@@ -1,173 +0,0 @@
-<?php
-/**
- * This is a PHP library that handles calling reCAPTCHA.
- *
- * BSD 3-Clause License
- * @copyright (c) 2019, Google Inc.
- * @link https://www.google.com/recaptcha
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its
- *    contributors may be used to endorse or promote products derived from
- *    this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace ReCaptcha;
-
-use PHPUnit\Framework\TestCase;
-
-class ResponseTest extends TestCase
-{
-
-    /**
-     * @dataProvider provideJson
-     */
-    public function testFromJson($json, $success, $errorCodes, $hostname, $challengeTs, $apkPackageName, $score, $action)
-    {
-        $response = Response::fromJson($json);
-        $this->assertEquals($success, $response->isSuccess());
-        $this->assertEquals($errorCodes, $response->getErrorCodes());
-        $this->assertEquals($hostname, $response->getHostname());
-        $this->assertEquals($challengeTs, $response->getChallengeTs());
-        $this->assertEquals($apkPackageName, $response->getApkPackageName());
-        $this->assertEquals($score, $response->getScore());
-        $this->assertEquals($action, $response->getAction());
-    }
-
-    public function provideJson()
-    {
-        return array(
-            array(
-                '{"success": true}',
-                true, array(), null, null, null, null, null,
-            ),
-            array(
-                '{"success": true, "hostname": "google.com"}',
-                true, array(), 'google.com', null, null, null, null,
-            ),
-            array(
-                '{"success": false, "error-codes": ["test"]}',
-                false, array('test'), null, null, null, null, null,
-            ),
-            array(
-                '{"success": false, "error-codes": ["test"], "hostname": "google.com"}',
-                false, array('test'), 'google.com', null, null, null, null,
-            ),
-            array(
-                '{"success": false, "error-codes": ["test"], "hostname": "google.com", "challenge_ts": "timestamp", "apk_package_name": "apk", "score": "0.5", "action": "action"}',
-                false, array('test'), 'google.com', 'timestamp', 'apk', 0.5, 'action',
-            ),
-            array(
-                '{"success": true, "error-codes": ["test"]}',
-                true, array(), null, null, null, null, null,
-            ),
-            array(
-                '{"success": true, "error-codes": ["test"], "hostname": "google.com"}',
-                true, array(), 'google.com', null, null, null, null,
-            ),
-            array(
-                '{"success": false}',
-                false, array(ReCaptcha::E_UNKNOWN_ERROR), null, null, null, null, null,
-            ),
-            array(
-                '{"success": false, "hostname": "google.com"}',
-                false, array(ReCaptcha::E_UNKNOWN_ERROR), 'google.com', null, null, null, null,
-            ),
-            array(
-                'BAD JSON',
-                false, array(ReCaptcha::E_INVALID_JSON), null, null, null, null, null,
-            ),
-        );
-    }
-
-    public function testIsSuccess()
-    {
-        $response = new Response(true);
-        $this->assertTrue($response->isSuccess());
-
-        $response = new Response(false);
-        $this->assertFalse($response->isSuccess());
-
-        $response = new Response(true, array(), 'example.com');
-        $this->assertEquals('example.com', $response->getHostName());
-    }
-
-    public function testGetErrorCodes()
-    {
-        $errorCodes = array('test');
-        $response = new Response(true, $errorCodes);
-        $this->assertEquals($errorCodes, $response->getErrorCodes());
-    }
-
-    public function testGetHostname()
-    {
-        $hostname = 'google.com';
-        $errorCodes = array();
-        $response = new Response(true, $errorCodes, $hostname);
-        $this->assertEquals($hostname, $response->getHostname());
-    }
-
-    public function testGetChallengeTs()
-    {
-        $timestamp = 'timestamp';
-        $errorCodes = array();
-        $response = new Response(true, array(), 'hostname', $timestamp);
-        $this->assertEquals($timestamp, $response->getChallengeTs());
-    }
-
-    public function TestGetApkPackageName()
-    {
-        $apk = 'apk';
-        $response = new Response(true, array(), 'hostname', 'timestamp', 'apk');
-        $this->assertEquals($apk, $response->getApkPackageName());
-    }
-
-    public function testGetScore()
-    {
-        $score = 0.5;
-        $response = new Response(true, array(), 'hostname', 'timestamp', 'apk', $score);
-        $this->assertEquals($score, $response->getScore());
-    }
-
-    public function testGetAction()
-    {
-        $action = 'homepage';
-        $response = new Response(true, array(), 'hostname', 'timestamp', 'apk', '0.5', 'homepage');
-        $this->assertEquals($action, $response->getAction());
-    }
-
-    public function testToArray()
-    {
-        $response = new Response(true, array(), 'hostname', 'timestamp', 'apk', '0.5', 'homepage');
-        $expected = array(
-            'success' => true,
-            'error-codes' => array(),
-            'hostname' => 'hostname',
-            'challenge_ts' => 'timestamp',
-            'apk_package_name' => 'apk',
-            'score' => 0.5,
-            'action' => 'homepage',
-        );
-        $this->assertEquals($expected, $response->toArray());
-    }
-}
